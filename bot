#!/home/mute/bin/tclsh8.3

set ::mynick neutronbot,neutrontcl
set ::channels {#mute}
set ::sasl_user mute
set ::sasl_pass [exec cat sekret]

# basically a comment of what I was running to test it each iteration
set TEST_PROCEDURE {
show event manager policy active
event manager scheduler clear policy 5
copy http://150.136.80.131/downloads/tclbot flash:/policies/bot.tcl
conf t
no event manager policy bot.tcl
event manager policy bot.tcl
end
event manager run bot.tcl
}

# catch this so I can run it on non-cisco tclsh without issue
catch {::cisco::eem::event_register_none maxrun 31536000}

# flood control: safe defaults.
# allowance is increased by RATE units each second
# each message costs PER units. MAX should be 5*PER to allow a burst of 5 messages.
variable ::sendq_RATE 5 ::sendq_PER 8 ::sendq_MAX 40

variable ::conn_state disconnected
variable ::dcc_host {} ::dcc_incoming {} ::dcc_socket {}

proc save_info {} {
  set out [open "info.txt" w]
  puts $out [array get ::info]
  close $out
}

proc load_info {} {
  catch {
    set in [open "info.txt"]
    array set ::info [read $in]
    close $in
  }
}

proc send {line {head 0}} {
  if {$head == 1} {
    set ::sendq [list $line $::sendq]
  } else {
    lappend ::sendq $line
  }
}

proc sendq_dowork {} {
  incr ::sendq_allowance $::sendq_RATE
  if {$::sendq_allowance > $::sendq_MAX} {
    set ::sendq_allowance $::sendq_MAX
  }

  if {![llength $::sendq]} {return}

  while {[llength $::sendq] > 0 && $::sendq_allowance >= $::sendq_PER} {
    puts $::fd "[lindex $::sendq 0]"
    set ::sendq [lrange $::sendq 1 end]
    set ::sendq_allowance [expr {$::sendq_allowance - $::sendq_PER}]
  }
}

proc recv {} {
  gets $::fd line
  if {[eof $::fd]} {
    irc_disconnect
    return
  }
  set tags {}
  if {[regexp -- {^@(\S+)} $line -> tagstr]} {
    set tags [split $tagstr {;}]
    regsub -- {^@\S+\s+} $line {} line
  }
  if {![regexp -- {^:(\S+) (\S+) (\S+)(?: :?(.*))?} $line -> src cmd dst rest]} {
    set src {}
    set dst {}
    regexp -- {^(\S+) :?(.*)} $line -> cmd rest
  }
  if {![info exists cmd]} {
    return -1
  }

  switch $cmd {
    002 - 003 - 004 - 005 - 250 - 251 - 252 - 253 - 254 - 
    255 - 265 - 266 - 332 - 333 - 372 - 375 - 376 {
      # saves from printing in default action because we don't care.
    }
    INVITE {cmd_invite $tags $src $dst $rest}
    NOTICE {cmd_notice $src $dst $rest}
    PING {send "PONG :$rest" 1}
    PRIVMSG {cmd_privmsg $tags $src $dst $rest}
    001 {cmd_001}
    338 {cmd_338 $rest}
    433 {send_nick}

    CAP {send "AUTHENTICATE PLAIN"}
    AUTHENTICATE send_sasl
    903 {send "CAP END"}
    904 {exit}

    default {puts "<<< $line"}
  }
}

proc reply {nick dst msg} {
  if {$dst == $::curnick} {
    puts "\[MSG:$nick\] <$::curnick> $msg"
    send "PRIVMSG $nick :$msg"
  } elseif {[regexp -- {^dcc=(.*)$} $dst -> sock]} {
    puts "\[DCC:$nick\] <$::curnick> $msg"
    puts $sock $msg
  } else {
    puts "\[$dst\] <$::curnick> $nick: $msg"
    send "PRIVMSG $dst :$nick: $msg"
  }
}

proc ctcp_reply {nick msg} {
  puts "*** CTCP reply <$nick>: $msg"
  send "NOTICE $nick :\001$msg\001"
}

proc cmd_001 {} {
  send "WHOIS $::curnick"
  foreach c $::channels {
    send "JOIN $c"
  }
}

proc cmd_338 {rest} {
  if {[regexp -- {^(\S+)\s(\S+)} $rest -> who ip]} {
    if {$who == $::curnick} {
      # TODO(mute): must be a [binary format] for this...
      set longip 0
      set shift 32
      foreach i [split $ip .] {
        incr shift -8
        incr longip [expr {$i<<$shift}]
      }
      set ::dcc_host $longip
    }
  }
}

proc cmd_ctcp {nick dst cmd rest} {
  if {$cmd == "ACTION"} {
    puts "\[[expr {$dst == $::curnick ? "MSG:$nick" : $dst}]\] *** $nick $rest"
    return
  }
  puts "*** CTCP request <$nick>: $cmd $rest"
  switch $cmd {
    DCC {send "NOTICE $nick :I don't trust DCC. Message me \"chat me\""}
    PING {ctcp_reply $nick "PING $rest"}
    TIME {ctcp_reply $nick [clock format [clock seconds] -format "%a, %d %b %Y %H:%M:%S %z"]}
    VERSION {ctcp_reply $nick "VERSION tclbot https://github.com/neutronscott/tclbot"}
  } 
}

proc cmd_invite {tags src dst rest} {
  if {[is_admin $tags]} {
    send "JOIN $rest" 1
  }
}

proc cmd_notice {src dst msg} {
  if {$dst == "*"} {
    puts "$msg"
  } elseif {[string match {*!*} $src]} {
    set nick [string range $src 0 [expr [string first ! $src] - 1]]
    if {$dst == $::curnick} {
      puts "\[MSG:$nick\] -$nick- $msg"
    } else {
      puts "\[$dst\] -$nick- $msg"
    }
  }
}

proc cmd_privmsg {tags src dst msg} {
  set nick [string range $src 0 [expr [string first ! $src] - 1]]

  if {[regexp -- {^\001(\S+)(?:\s?(.*))?\001} $msg -> cmd rest]} {
    cmd_ctcp $nick $dst $cmd $rest
    return
  }

  puts "\[[expr {$dst == $::curnick ? "MSG:$nick" : $dst}]\] <$nick> $msg"

  if {[string match -nocase "$::curnick:*" $msg]} {
    regexp -- {\S+: ?(.*)} $msg -> msg
  } elseif {$dst == $::curnick} {
    # continue
  } else {
    return
  }

  h_cmd $nick $dst $msg $tags
}

proc c_info {nick dst word} {
  if {[info exists ::info($word)]} {
    foreach line [split $::info($word) \n] {
      reply $nick $dst $line
    }
  } else {
    reply $nick $dst "I don't know."
  }
}

proc c_define {nick dst word def} {
  if {[info exist ::info($word)]} {
    reply $nick $dst "I already know that."
    return
  }
  set ::info($word) $def
  reply $nick $dst "Ok."
  save_info
}

proc c_eval {nick dst args} {
  catch [lindex $args 1] result
  foreach line [split $result \n] {
    if {$line == {}} {set line { }}
    reply $nick $dst $line
  }
}

proc c_op {nick dst args} {
  send "MODE $dst +o $nick" 1
}

proc c_whoami {tags nick dst args} {
  reply $nick $dst "You are $nick (tags: $tags) (admin: [expr {[is_admin $tags] ? "yes" : "no"}])"
}

proc c_who {nick dst args} {
  set i 0
  foreach s [array names ::dcc_nick] {
    incr i
    reply $nick $dst "[format %3d $i] $::dcc_nick($s)"
  }
}

proc c_chat {tags nick dst args} {
  if {$::dcc_incoming != {}} {
    send "NOTICE $nick :I'm awaiting another connection. Please try again later."
    return
  }
  set ::dcc_incoming [list $nick $tags]
  if {$::dcc_socket == {}} {
    set sock [socket -server dcc_chat_accept 0]
    set port [lindex [fconfigure $sock -sockname] 2]
    set ::dcc_socket [list $sock $port]
  } else {
    set sock [lindex $::dcc_socket 0]
    set port [lindex $::dcc_socket 1]
  }

  puts "*** DCC CHAT listen socket: $sock"
  send "PRIVMSG $nick :\001DCC CHAT chat $::dcc_host $port\001"
  set ::dcc_timer [after 30000 {
    send "NOTICE [lindex $::dcc_incoming 0] :DCC CHAT request timed out."
    set ::dcc_incoming {}
  }]
}

proc is_admin {tags} {
  # TODO(mute): needs an ACL with different checks than just CAP tags
  return [expr {$tags == "account=mute"}]
}

proc flagchk {dst flags {tags {}}} {
  if {[string match {*a*} $flags] && ![is_admin $tags]} {
    return 0
  }

  if {[string match {*p*} $flags] && $dst == $::curnick} {
    return 1
  } elseif {[string match {*d*} $flags] && [regexp -- {^dcc=(.*)$} $dst -> sock]} {
    return 1
  } elseif {[string match {*c*} $flags] && [string match {#*} $dst]} {
    return 1
  }
  return 0
}

proc c_help_chan {cmd_table tags nick dst args} {
  set cmdlist {}
  foreach entry $cmd_table {
    foreach {cmd flags proc help_text} $entry {
      lappend cmdlist [string toupper $cmd]
    }
  }
  reply $nick $dst "Commands: [join $cmdlist ", "]. Detailed help is available by /msg or dcc chat" 
}

proc c_help_priv {cmd_table tags nick dst args} {
  foreach entry $cmd_table {
    foreach {cmd flags proc help_text} $entry {
      if {[flagchk $dst $flags $tags]} {
        reply $nick $dst [format "%-10s %s" [string toupper $cmd] $help_text] 
      }
    }
  }
}

proc h_cmd {nick dst msg {tags --}} {
  # { {cmd flags proc help_text} }
  # flags:
  # a - require admin
  # c - channel
  # d - dcc chat
  # p - private message
  set cmd_table {
    { {eval} acdp c_eval "Evaluate TCL Commands" }
    { {op me} ac c_op {} "I'll try to MODE +o you" }

    { {chat me} cp {c_chat $tags} "Have bot initiate DCC chat for partyline and control" }
    { {help}    c  {c_help_chan $cmd_table $tags} "Get help" }
    { {help}    dp {c_help_priv $cmd_table $tags} "Get help" }
    { {whoami} cdp {c_whoami $tags} "Get info about your user's id and admin status"}
    { {who}     d  {c_who} "List other users in DCC partyline" }
  }

  foreach entry $cmd_table {
    foreach {cmd flags proc help_text } $entry {
      set args [regexp -nocase -inline -- "^${cmd}(?:\s+(.*))?$" $msg]
      if {$args != {} && [flagchk $dst $flags $tags]} {
        eval $proc $nick $dst $args
        return
      }
    }
  }
  # idk these aren't commands so special case them
  if {[regexp -nocase -- {^(?:what is\s+)?(\S+?)\??$} $msg -> word] && [flagchk $dst cdp]} {
    c_info $nick $dst $word
  } elseif {[regexp -nocase -- {^(\S+)\s+is\s+(.*)} $msg -> word def] && [flagchk $dst c]} {
    c_define $nick $dst $word $def
  } else {reply $nick $dst "Unknown command: \[$msg\]"}
}

proc dcc_putsall {msg} {
  foreach s [array names ::dcc_nick] {
    puts $s "$msg"
  }
}

proc dcc_close {nick sock} {
  unset ::dcc_nick($sock)
  close $sock
  dcc_putsall "*** $nick has left the party chat." 
}

proc dcc_recv {sock} {
  set nick $::dcc_nick($sock)
  gets $sock line
  if {[eof $sock]} {
    dcc_close $nick $sock
    return
  }

  if {[regexp -nocase -- {^\001ACTION\s+(.*)\001$} $line -> emote]} {
    puts "\[DCC:$nick\] *** $nick $emote"
    dcc_putsall "*** $nick $emote"
  } elseif {[regexp -nocase -- {^\.(.*)$} $line -> msg]} {
    puts "\[DCC:$nick\] <$nick> $line"
    h_cmd $nick "dcc=$sock" $msg $::dcc_tags($sock)
  } else {
    puts "\[DCC:$nick\] <$nick> $line"
    dcc_putsall "<$nick> $line"
  }
}

proc dcc_chat_accept {sock addr port} {
  if {[info exists ::dcc_timer]} {
    after cancel $::dcc_timer
    unset ::dcc_timer
  }
  fconfigure $sock -buffering line -translation crlf
  if {$::dcc_incoming == {}} {
    puts $sock "Invites expire after 30 sec. Please try again."
    close $sock
    return
  }
  set ::dcc_nick($sock) [lindex $::dcc_incoming 0]
  set ::dcc_tags($sock) [lindex $::dcc_incoming 1]
  puts "*** DCC CHAT client socket: $sock $addr $port"
  dcc_putsall "*** $::dcc_nick($sock) has joined the party chat."
  fileevent $sock readable [list dcc_recv $sock]
  unset ::dcc_incoming
}


proc send_nick {} {
  set nickarr [split $::mynick ,]

  if {$::nicknum >= [llength $nickarr]} {
    set ::curnick [lindex $nickarr 0]$::nicknum
  } else {
    set ::curnick [lindex $nickarr $::nicknum]
  }
  send "NICK $::curnick"
  incr ::nicknum
}

proc send_sasl {} {
  if {![info exists ::sasl_computed]} {
    set ::sasl_computed [base64_encode "$::sasl_user\0$::sasl_user\0$::sasl_pass"]
  }
  for {set i 0} {$i < [string length $::sasl_computed]} {incr i 400} {
    send "AUTHENTICATE [string range $::sasl_computed $i [expr {$i + 400}]]"
  }
  if {[string length $::sasl_computed] == $i} {
    send "AUTHENTICATE +"
  }
}

proc base64_encode {str} {
  set base64_en {
    A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \
    a b c d e f g h i j k l m n o p q r s t u v w x y z \
    0 1 2 3 4 5 6 7 8 9 + /
  }
  set result {}
  binary scan $str c* X
  foreach {x y z} $X {
    set u [expr {$x<<16|[expr {$y!={}?$y:0}]<<8|[expr {$z!={}?$z:0}]}]
    append result [lindex $base64_en [expr {$u>>18}]]
    append result [lindex $base64_en [expr {$u>>12&63}]]
    append result [expr {$y=={}?"=":[lindex $base64_en [expr {$u>>6&63}]]}]
    append result [expr {$z=={}?"=":[lindex $base64_en [expr {$u&63}]]}]
  }
  return $result
}

proc bgerror message {
  puts stderr $::errorInfo
}

proc irc_disconnect {} {
  close $::fd
  set ::conn_state disconnected
  set ::sendq {}
  after 10000 {irc_connect}
}

proc irc_connect {} {
  set ::nicknum 0
  set ::sendq_allowance $::sendq_MAX
  set ::sendq {}

  set ::fd [socket irc.libera.chat 6667]
  fconfigure $::fd -buffering line -translation crlf
  set ::conn_state connected

  send "CAP REQ :sasl account-tag chghost"
  send_nick
  send "USER tcl 0 * :tclbot"

  fileevent $::fd readable recv
}

proc main {} {
  load_info
  irc_connect

  while {1} {
    after 1000 {set timeout 1}
    vwait timeout
    sendq_dowork
  }
}

main
